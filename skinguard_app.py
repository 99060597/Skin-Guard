# -*- coding: utf-8 -*-
"""SkinGuard – Melanoma Detection Using AI RH

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/146wsAqbumhtbjTIMf8v4yQ9gJlXpcNRH

# New Section
"""

file_path = 'C:/Users/richi/Downloads/dataset'

import tensorflow as tf
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

train_generator = train_datagen.flow_from_directory(
    r'C:\Users\richi\Downloads\skinguard\dataset',
    target_size=(128, 128),
    batch_size=32,
    class_mode='binary',
    subset='training'
)

validation_generator = train_datagen.flow_from_directory(
    r'C:\Users\richi\Downloads\skinguard\dataset',
    target_size=(128, 128),
    batch_size=32,
    class_mode='binary',
    subset='validation'
)

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
    MaxPooling2D(pool_size=(2, 2)),

    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),

    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),

    Flatten(),

    Dense(128, activation='relu'),
    Dropout(0.5),

    Dense(1, activation='sigmoid')
])

model.compile(
    optimizer=Adam(),
    loss='binary_crossentropy',
    metrics=['accuracy']
)

model.summary()

history = model.fit(
    train_generator,
    epochs=10,
    validation_data=validation_generator
)

model.save('skin_model.h5')

from tensorflow.keras.models import load_model
model = load_model('skin_model.h5')
print("Model loaded!")

test_datagen = ImageDataGenerator(rescale=1./255)

test_generator = test_datagen.flow_from_directory(
    'C:\\Users\\richi\\Downloads\\test',
    target_size=(128, 128),
    batch_size=32,
    class_mode='binary',
    shuffle=False
)

model = load_model('skin_model.h5')

loss, accuracy = model.evaluate(test_generator)
print(f"Test Loss: {loss:.4f}")
print(f"Test Accuracy: {accuracy:.4f}")

import streamlit as st
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
from PIL import Image

model = load_model('skin_model.h5')

st.title("SkinGuard – Melanoma Detection Using AI")

uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    img = Image.open(uploaded_file).convert('RGB')
    st.image(img, caption='Uploaded Image', use_column_width=True)
    img = img.resize((128, 128))
    img_array = image.img_to_array(img)
    img_array = img_array / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    prediction = model.predict(img_array)[0][0]
    if prediction > 0.5:
        st.error(f"Prediction: Malignant (Confidence: {prediction:.2f})")
    else:
        st.success(f"Prediction: Benign (Confidence: {1 - prediction:.2f})")


import streamlit as st
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
from PIL import Image

model = load_model('skin_model.h5')

st.title("SkinGuard – Melanoma Detection Using AI")
st.write("Upload a skin lesion image to determine if it's benign or malignant.")

uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    img = Image.open(uploaded_file).convert('RGB')
    st.image(img, caption='Uploaded Image', use_column_width=True)
    
    img = img.resize((128, 128))
    img_array = image.img_to_array(img)
    img_array = img_array / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = model.predict(img_array)[0][0]
    if prediction > 0.5:
        st.error(f"Prediction: Malignant (Confidence: {prediction:.2f})")
    else:
        st.success(f"Prediction: Benign (Confidence: {1 - prediction:.2f})")